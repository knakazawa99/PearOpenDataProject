// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/auth.go

// Package usecase is a generated GoMock package.
package usecase

import (
	entity "api/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// AdminSignUp mocks base method.
func (m *MockAuth) AdminSignUp(db *gorm.DB, auth entity.Auth) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminSignUp", db, auth)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminSignUp indicates an expected call of AdminSignUp.
func (mr *MockAuthMockRecorder) AdminSignUp(db, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminSignUp", reflect.TypeOf((*MockAuth)(nil).AdminSignUp), db, auth)
}

// DeleteAdmin mocks base method.
func (m *MockAuth) DeleteAdmin(db *gorm.DB, auth entity.Auth, authorizationEntity entity.Authorization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdmin", db, auth, authorizationEntity)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdmin indicates an expected call of DeleteAdmin.
func (mr *MockAuthMockRecorder) DeleteAdmin(db, auth, authorizationEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdmin", reflect.TypeOf((*MockAuth)(nil).DeleteAdmin), db, auth, authorizationEntity)
}

// DownloadWithToken mocks base method.
func (m *MockAuth) DownloadWithToken(db *gorm.DB, inputDownloadPear entity.DownloadPear) (entity.DownloadPear, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadWithToken", db, inputDownloadPear)
	ret0, _ := ret[0].(entity.DownloadPear)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadWithToken indicates an expected call of DownloadWithToken.
func (mr *MockAuthMockRecorder) DownloadWithToken(db, inputDownloadPear interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadWithToken", reflect.TypeOf((*MockAuth)(nil).DownloadWithToken), db, inputDownloadPear)
}

// GetAdmin mocks base method.
func (m *MockAuth) GetAdmin(db *gorm.DB, authorizationEntity entity.Authorization) ([]entity.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdmin", db, authorizationEntity)
	ret0, _ := ret[0].([]entity.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdmin indicates an expected call of GetAdmin.
func (mr *MockAuthMockRecorder) GetAdmin(db, authorizationEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdmin", reflect.TypeOf((*MockAuth)(nil).GetAdmin), db, authorizationEntity)
}

// RequestEmail mocks base method.
func (m *MockAuth) RequestEmail(db *gorm.DB, auth entity.Auth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestEmail", db, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestEmail indicates an expected call of RequestEmail.
func (mr *MockAuthMockRecorder) RequestEmail(db, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestEmail", reflect.TypeOf((*MockAuth)(nil).RequestEmail), db, auth)
}

// SaveAdmin mocks base method.
func (m *MockAuth) SaveAdmin(db *gorm.DB, auth entity.Auth, authorizationEntity entity.Authorization) (entity.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAdmin", db, auth, authorizationEntity)
	ret0, _ := ret[0].(entity.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveAdmin indicates an expected call of SaveAdmin.
func (mr *MockAuthMockRecorder) SaveAdmin(db, auth, authorizationEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAdmin", reflect.TypeOf((*MockAuth)(nil).SaveAdmin), db, auth, authorizationEntity)
}
