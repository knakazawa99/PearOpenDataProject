// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/download_pear.go

// Package repository is a generated GoMock package.
package repository

import (
	entity "api/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockDownloadPear is a mock of DownloadPear interface.
type MockDownloadPear struct {
	ctrl     *gomock.Controller
	recorder *MockDownloadPearMockRecorder
}

// MockDownloadPearMockRecorder is the mock recorder for MockDownloadPear.
type MockDownloadPearMockRecorder struct {
	mock *MockDownloadPear
}

// NewMockDownloadPear creates a new mock instance.
func NewMockDownloadPear(ctrl *gomock.Controller) *MockDownloadPear {
	mock := &MockDownloadPear{ctrl: ctrl}
	mock.recorder = &MockDownloadPearMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloadPear) EXPECT() *MockDownloadPearMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockDownloadPear) Find(db *gorm.DB, downloadPear entity.DownloadPear) (entity.DownloadPear, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", db, downloadPear)
	ret0, _ := ret[0].(entity.DownloadPear)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockDownloadPearMockRecorder) Find(db, downloadPear interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDownloadPear)(nil).Find), db, downloadPear)
}
