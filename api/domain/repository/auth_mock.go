// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/auth.go

// Package repository is a generated GoMock package.
package repository

import (
	entity "api/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// FindByEmail mocks base method.
func (m *MockAuth) FindByEmail(db *gorm.DB, auth entity.Email) (entity.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", db, auth)
	ret0, _ := ret[0].(entity.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockAuthMockRecorder) FindByEmail(db, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockAuth)(nil).FindByEmail), db, auth)
}

// SaveAuth mocks base method.
func (m *MockAuth) SaveAuth(db *gorm.DB, auth entity.Auth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAuth", db, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAuth indicates an expected call of SaveAuth.
func (mr *MockAuthMockRecorder) SaveAuth(db, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAuth", reflect.TypeOf((*MockAuth)(nil).SaveAuth), db, auth)
}
