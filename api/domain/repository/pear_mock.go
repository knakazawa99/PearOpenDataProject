// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/pear.go

// Package repository is a generated GoMock package.
package repository

import (
	entity "api/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockPear is a mock of Pear interface.
type MockPear struct {
	ctrl     *gomock.Controller
	recorder *MockPearMockRecorder
}

// MockPearMockRecorder is the mock recorder for MockPear.
type MockPearMockRecorder struct {
	mock *MockPear
}

// NewMockPear creates a new mock instance.
func NewMockPear(ctrl *gomock.Controller) *MockPear {
	mock := &MockPear{ctrl: ctrl}
	mock.recorder = &MockPearMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPear) EXPECT() *MockPearMockRecorder {
	return m.recorder
}

// FindPears mocks base method.
func (m *MockPear) FindPears(db *gorm.DB) ([]entity.Pear, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPears", db)
	ret0, _ := ret[0].([]entity.Pear)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPears indicates an expected call of FindPears.
func (mr *MockPearMockRecorder) FindPears(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPears", reflect.TypeOf((*MockPear)(nil).FindPears), db)
}

// FindReleasedPears mocks base method.
func (m *MockPear) FindReleasedPears(db *gorm.DB) ([]entity.Pear, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReleasedPears", db)
	ret0, _ := ret[0].([]entity.Pear)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindReleasedPears indicates an expected call of FindReleasedPears.
func (mr *MockPearMockRecorder) FindReleasedPears(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReleasedPears", reflect.TypeOf((*MockPear)(nil).FindReleasedPears), db)
}

// Update mocks base method.
func (m *MockPear) Update(db *gorm.DB, pear entity.Pear) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", db, pear)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPearMockRecorder) Update(db, pear interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPear)(nil).Update), db, pear)
}
