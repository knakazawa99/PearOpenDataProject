// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/pear_data.go

// Package usecase is a generated GoMock package.
package usecase

import (
	entity "api/domain/entity"
	response "api/http/response"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPear is a mock of Pear interface.
type MockPear struct {
	ctrl     *gomock.Controller
	recorder *MockPearMockRecorder
}

// MockPearMockRecorder is the mock recorder for MockPear.
type MockPearMockRecorder struct {
	mock *MockPear
}

// NewMockPear creates a new mock instance.
func NewMockPear(ctrl *gomock.Controller) *MockPear {
	mock := &MockPear{ctrl: ctrl}
	mock.recorder = &MockPearMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPear) EXPECT() *MockPearMockRecorder {
	return m.recorder
}

// GetAdminDataVersions mocks base method.
func (m *MockPear) GetAdminDataVersions() ([]response.PearAdminDataVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminDataVersions")
	ret0, _ := ret[0].([]response.PearAdminDataVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminDataVersions indicates an expected call of GetAdminDataVersions.
func (mr *MockPearMockRecorder) GetAdminDataVersions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminDataVersions", reflect.TypeOf((*MockPear)(nil).GetAdminDataVersions))
}

// GetDataVersions mocks base method.
func (m *MockPear) GetDataVersions() ([]response.PearDataVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataVersions")
	ret0, _ := ret[0].([]response.PearDataVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataVersions indicates an expected call of GetDataVersions.
func (mr *MockPearMockRecorder) GetDataVersions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataVersions", reflect.TypeOf((*MockPear)(nil).GetDataVersions))
}

// UpdateAdminData mocks base method.
func (m *MockPear) UpdateAdminData(pearEntity entity.Pear, authorizationEntity entity.Authorization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdminData", pearEntity, authorizationEntity)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAdminData indicates an expected call of UpdateAdminData.
func (mr *MockPearMockRecorder) UpdateAdminData(pearEntity, authorizationEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdminData", reflect.TypeOf((*MockPear)(nil).UpdateAdminData), pearEntity, authorizationEntity)
}
